import proguard.gradle.ProGuardTask

buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'com.guardsquare:proguard-gradle:7.7.0'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'com.github.johnrengelman.shadow' version '8.0.0'
}

apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

group = mod_group_id
version = minecraft_version + "-" + mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = 'Curse Maven'
        url = "https://www.cursemaven.com"
    }
    maven {
        name = "Sona Type"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "Code MC"
        url = "https://repo.codemc.io/repository/maven-public/"
    }
    maven {
        name = "Latvian"
        url = "https://maven.latvian.dev/releases"
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
    maven {
        name = "Architectury"
        url = "https://maven.architectury.dev/"
    }
}

configurations {
    shade
    implementation.extendsFrom shade
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation "com.mojang:brigadier:1.0.18"
    shade 'io.github.revxrsal:lamp.common:4.0.0-rc.11'
    shade 'io.github.revxrsal:lamp.brigadier:4.0.0-rc.11'

    implementation 'io.github.revxrsal:lamp.common:4.0.0-rc.11'
    implementation 'io.github.revxrsal:lamp.brigadier:4.0.0-rc.11'

    implementation "dev.latvian.mods:kubejs-forge:${kubejs_version}"

    implementation "org.javassist:javassist:3.30.2-GA"
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    implementation 'com.mojang:brigadier:1.0.18'

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
                             forge_version       : forge_version, forge_version_range: forge_version_range,
                             loader_version_range: loader_version_range,
                             mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
                             mod_authors         : mod_authors, mod_description: mod_description,]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    archiveClassifier = 'slim'
    manifest {
        attributes(["Specification-Title"     : mod_id,
                    "Specification-Vendor"    : mod_authors,
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : mod_authors,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }

    finalizedBy 'reobfJar'
}

tasks.register('obfuscateJar', ProGuardTask) {
    dependsOn tasks.shadowJar

    keep(["allowobfuscation": true], "public class ${project.group}.** { *; }")
    keep(["allowobfuscation": false], "class !${project.group}.** { *; }")

    keep(["allowobfuscation": false], "class ${project.group}.freeepicgames.FreeEpicGames { *; }")
    keep(["allowobfuscation": false], "class ${project.group}.mixin.** { *; }")

    optimizationpasses 10
    keepattributes '*Annotation*'
    ignorewarnings
    verbose

    obfuscationdictionary("dic.txt")
    classobfuscationdictionary("dic.txt")
    packageobfuscationdictionary("dic.txt")

    libraryjars "${System.getProperty('java.home')}/lib"
    libraryjars "${System.getProperty('java.home')}/jmods", jarfilter: '!**.jar', filter: '!module-info.class'
    libraryjars sourceSets.main.compileClasspath

    injars layout.buildDirectory.file("libs/${mod_id}-${version}-shadowed.jar")
    outjars layout.buildDirectory.file("libs/${mod_id}-${version}-publish.jar")
    printmapping(project.layout.buildDirectory.file("proguard/mappings.map"))
}

shadowJar {
    archiveClassifier = 'shadowed'
    configurations = [project.configurations.shade]
    relocate 'io.github.revxrsal.lamp.common', "${project.group}.relocated.lamp.common"
    relocate 'io.github.revxrsal.lamp.brigadier', "${project.group}.relocated.lamp.brigadier"
    finalizedBy 'reobfShadowJar'
}

//assemble.dependsOn obfuscateJar

reobf {
    shadowJar {}
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += ["-parameters"]
}
